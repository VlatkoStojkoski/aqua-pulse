// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model QuizQuestionAnswer {
  id String @id @default(cuid())

  content   String
  isCorrect Boolean
  order     Int     @default(autoincrement())

  questionId String?
  question   QuizQuestion? @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizQuestion {
  id String @id @default(cuid())

  content  String
  answers  QuizQuestionAnswer[]
  sessions QuizSession[]

  quizId String?
  quiz   Quiz?   @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Quiz {
  id           String         @id @default(cuid())
  slug         String         @unique
  title        String
  questions    QuizQuestion[]
  cover        String?
  quizSessions QuizSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizSessionPlayer {
  id String @id @default(cuid())

  score Int @default(0)

  quizSessionId String?
  quizSession   QuizSession? @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model QuizSession {
  id   String @id @default(cuid())
  code String @unique

  isSingleplayer Boolean             @default(false)
  players        QuizSessionPlayer[]

  maxQuestions   Int @default(10)
  questionNumber Int @default(0)

  currentQuestionId String?
  currentQuestion   QuizQuestion? @relation(fields: [currentQuestionId], references: [id], onDelete: Cascade)

  quizId String?
  quiz   Quiz?   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quizSessions  QuizSessionPlayer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
